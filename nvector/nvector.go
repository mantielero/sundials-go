// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Sun, 28 Apr 2019 00:38:31 CEST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package nvector

/*
#cgo LDFLAGS: -lsundials_nvecserial -L/usr/lib
#include <stdio.h>
#include <sundials/sundials_types.h>
#include <sundials/sundials_nvector.h>
#include <sundials/sundials_fnvector.h>
#include <nvector/nvector_serial.h>
#include <sundials/sundials_math.h>
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// NVNewSerial function as declared in nvector/nvector_serial.h:85
func NVNewSerial(vecLength Sunindextype) NVector {
	cvecLength, _ := (C.sunindextype)(vecLength), cgoAllocsUnknown
	__ret := C.N_VNew_Serial(cvecLength)
	__v := *NewNVectorRef(unsafe.Pointer(&__ret))
	return __v
}

// NVNewEmptySerial function as declared in nvector/nvector_serial.h:87
func NVNewEmptySerial(vecLength Sunindextype) NVector {
	cvecLength, _ := (C.sunindextype)(vecLength), cgoAllocsUnknown
	__ret := C.N_VNewEmpty_Serial(cvecLength)
	__v := *NewNVectorRef(unsafe.Pointer(&__ret))
	return __v
}

// NVMakeSerial function as declared in nvector/nvector_serial.h:89
func NVMakeSerial(vecLength Sunindextype, vData []Realtype) NVector {
	cvecLength, _ := (C.sunindextype)(vecLength), cgoAllocsUnknown
	cvData, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&vData)).Data)), cgoAllocsUnknown
	__ret := C.N_VMake_Serial(cvecLength, cvData)
	__v := *NewNVectorRef(unsafe.Pointer(&__ret))
	return __v
}

// NVCloneVectorArraySerial function as declared in nvector/nvector_serial.h:91
func NVCloneVectorArraySerial(count int32, w NVector) *NVector {
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	cw, _ := w.PassValue()
	__ret := C.N_VCloneVectorArray_Serial(ccount, cw)
	__v := NewNVectorRef(unsafe.Pointer(__ret))
	return __v
}

// NVCloneVectorArrayEmptySerial function as declared in nvector/nvector_serial.h:93
func NVCloneVectorArrayEmptySerial(count int32, w NVector) *NVector {
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	cw, _ := w.PassValue()
	__ret := C.N_VCloneVectorArrayEmpty_Serial(ccount, cw)
	__v := NewNVectorRef(unsafe.Pointer(__ret))
	return __v
}

// NVDestroyVectorArraySerial function as declared in nvector/nvector_serial.h:95
func NVDestroyVectorArraySerial(vs []NVector, count int32) {
	cvs, _ := unpackArgSNVector(vs)
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	C.N_VDestroyVectorArray_Serial(cvs, ccount)
	packSNVector(vs, cvs)
}

// NVGetLengthSerial function as declared in nvector/nvector_serial.h:97
func NVGetLengthSerial(v NVector) Sunindextype {
	cv, _ := v.PassValue()
	__ret := C.N_VGetLength_Serial(cv)
	__v := (Sunindextype)(__ret)
	return __v
}

// NVPrintSerial function as declared in nvector/nvector_serial.h:99
func NVPrintSerial(v NVector) {
	cv, _ := v.PassValue()
	C.N_VPrint_Serial(cv)
}

// NVPrintFileSerial function as declared in nvector/nvector_serial.h:101
func NVPrintFileSerial(v NVector, outfile []FILE) {
	cv, _ := v.PassValue()
	coutfile, _ := unpackArgSFILE(outfile)
	C.N_VPrintFile_Serial(cv, coutfile)
	packSFILE(outfile, coutfile)
}

// NVGetVectorIDSerial function as declared in nvector/nvector_serial.h:103
func NVGetVectorIDSerial(v NVector) NVectorID {
	cv, _ := v.PassValue()
	__ret := C.N_VGetVectorID_Serial(cv)
	__v := (NVectorID)(__ret)
	return __v
}

// NVCloneEmptySerial function as declared in nvector/nvector_serial.h:104
func NVCloneEmptySerial(w NVector) NVector {
	cw, _ := w.PassValue()
	__ret := C.N_VCloneEmpty_Serial(cw)
	__v := *NewNVectorRef(unsafe.Pointer(&__ret))
	return __v
}

// NVCloneSerial function as declared in nvector/nvector_serial.h:105
func NVCloneSerial(w NVector) NVector {
	cw, _ := w.PassValue()
	__ret := C.N_VClone_Serial(cw)
	__v := *NewNVectorRef(unsafe.Pointer(&__ret))
	return __v
}

// NVDestroySerial function as declared in nvector/nvector_serial.h:106
func NVDestroySerial(v NVector) {
	cv, _ := v.PassValue()
	C.N_VDestroy_Serial(cv)
}

// NVSpaceSerial function as declared in nvector/nvector_serial.h:107
func NVSpaceSerial(v NVector, lrw []Sunindextype, liw []Sunindextype) {
	cv, _ := v.PassValue()
	clrw, _ := (*C.sunindextype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&lrw)).Data)), cgoAllocsUnknown
	cliw, _ := (*C.sunindextype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&liw)).Data)), cgoAllocsUnknown
	C.N_VSpace_Serial(cv, clrw, cliw)
}

// NVGetArrayPointerSerial function as declared in nvector/nvector_serial.h:108
func NVGetArrayPointerSerial(v NVector) *Realtype {
	cv, _ := v.PassValue()
	__ret := C.N_VGetArrayPointer_Serial(cv)
	__v := *(**Realtype)(unsafe.Pointer(&__ret))
	return __v
}

// NVSetArrayPointerSerial function as declared in nvector/nvector_serial.h:109
func NVSetArrayPointerSerial(vData []Realtype, v NVector) {
	cvData, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&vData)).Data)), cgoAllocsUnknown
	cv, _ := v.PassValue()
	C.N_VSetArrayPointer_Serial(cvData, cv)
}

// NVLinearSumSerial function as declared in nvector/nvector_serial.h:112
func NVLinearSumSerial(a Realtype, x NVector, b Realtype, y NVector, z NVector) {
	ca, _ := (C.realtype)(a), cgoAllocsUnknown
	cx, _ := x.PassValue()
	cb, _ := (C.realtype)(b), cgoAllocsUnknown
	cy, _ := y.PassValue()
	cz, _ := z.PassValue()
	C.N_VLinearSum_Serial(ca, cx, cb, cy, cz)
}

// NVConstSerial function as declared in nvector/nvector_serial.h:113
func NVConstSerial(c Realtype, z NVector) {
	cc, _ := (C.realtype)(c), cgoAllocsUnknown
	cz, _ := z.PassValue()
	C.N_VConst_Serial(cc, cz)
}

// NVProdSerial function as declared in nvector/nvector_serial.h:114
func NVProdSerial(x NVector, y NVector, z NVector) {
	cx, _ := x.PassValue()
	cy, _ := y.PassValue()
	cz, _ := z.PassValue()
	C.N_VProd_Serial(cx, cy, cz)
}

// NVDivSerial function as declared in nvector/nvector_serial.h:115
func NVDivSerial(x NVector, y NVector, z NVector) {
	cx, _ := x.PassValue()
	cy, _ := y.PassValue()
	cz, _ := z.PassValue()
	C.N_VDiv_Serial(cx, cy, cz)
}

// NVScaleSerial function as declared in nvector/nvector_serial.h:116
func NVScaleSerial(c Realtype, x NVector, z NVector) {
	cc, _ := (C.realtype)(c), cgoAllocsUnknown
	cx, _ := x.PassValue()
	cz, _ := z.PassValue()
	C.N_VScale_Serial(cc, cx, cz)
}

// NVAbsSerial function as declared in nvector/nvector_serial.h:117
func NVAbsSerial(x NVector, z NVector) {
	cx, _ := x.PassValue()
	cz, _ := z.PassValue()
	C.N_VAbs_Serial(cx, cz)
}

// NVInvSerial function as declared in nvector/nvector_serial.h:118
func NVInvSerial(x NVector, z NVector) {
	cx, _ := x.PassValue()
	cz, _ := z.PassValue()
	C.N_VInv_Serial(cx, cz)
}

// NVAddConstSerial function as declared in nvector/nvector_serial.h:119
func NVAddConstSerial(x NVector, b Realtype, z NVector) {
	cx, _ := x.PassValue()
	cb, _ := (C.realtype)(b), cgoAllocsUnknown
	cz, _ := z.PassValue()
	C.N_VAddConst_Serial(cx, cb, cz)
}

// NVDotProdSerial function as declared in nvector/nvector_serial.h:120
func NVDotProdSerial(x NVector, y NVector) Realtype {
	cx, _ := x.PassValue()
	cy, _ := y.PassValue()
	__ret := C.N_VDotProd_Serial(cx, cy)
	__v := (Realtype)(__ret)
	return __v
}

// NVMaxNormSerial function as declared in nvector/nvector_serial.h:121
func NVMaxNormSerial(x NVector) Realtype {
	cx, _ := x.PassValue()
	__ret := C.N_VMaxNorm_Serial(cx)
	__v := (Realtype)(__ret)
	return __v
}

// NVWrmsNormSerial function as declared in nvector/nvector_serial.h:122
func NVWrmsNormSerial(x NVector, w NVector) Realtype {
	cx, _ := x.PassValue()
	cw, _ := w.PassValue()
	__ret := C.N_VWrmsNorm_Serial(cx, cw)
	__v := (Realtype)(__ret)
	return __v
}

// NVWrmsNormMaskSerial function as declared in nvector/nvector_serial.h:123
func NVWrmsNormMaskSerial(x NVector, w NVector, id NVector) Realtype {
	cx, _ := x.PassValue()
	cw, _ := w.PassValue()
	cid, _ := id.PassValue()
	__ret := C.N_VWrmsNormMask_Serial(cx, cw, cid)
	__v := (Realtype)(__ret)
	return __v
}

// NVMinSerial function as declared in nvector/nvector_serial.h:124
func NVMinSerial(x NVector) Realtype {
	cx, _ := x.PassValue()
	__ret := C.N_VMin_Serial(cx)
	__v := (Realtype)(__ret)
	return __v
}

// NVWL2NormSerial function as declared in nvector/nvector_serial.h:125
func NVWL2NormSerial(x NVector, w NVector) Realtype {
	cx, _ := x.PassValue()
	cw, _ := w.PassValue()
	__ret := C.N_VWL2Norm_Serial(cx, cw)
	__v := (Realtype)(__ret)
	return __v
}

// NVL1NormSerial function as declared in nvector/nvector_serial.h:126
func NVL1NormSerial(x NVector) Realtype {
	cx, _ := x.PassValue()
	__ret := C.N_VL1Norm_Serial(cx)
	__v := (Realtype)(__ret)
	return __v
}

// NVCompareSerial function as declared in nvector/nvector_serial.h:127
func NVCompareSerial(c Realtype, x NVector, z NVector) {
	cc, _ := (C.realtype)(c), cgoAllocsUnknown
	cx, _ := x.PassValue()
	cz, _ := z.PassValue()
	C.N_VCompare_Serial(cc, cx, cz)
}

// NVInvTestSerial function as declared in nvector/nvector_serial.h:128
func NVInvTestSerial(x NVector, z NVector) int32 {
	cx, _ := x.PassValue()
	cz, _ := z.PassValue()
	__ret := C.N_VInvTest_Serial(cx, cz)
	__v := (int32)(__ret)
	return __v
}

// NVConstrMaskSerial function as declared in nvector/nvector_serial.h:129
func NVConstrMaskSerial(c NVector, x NVector, m NVector) int32 {
	cc, _ := c.PassValue()
	cx, _ := x.PassValue()
	cm, _ := m.PassValue()
	__ret := C.N_VConstrMask_Serial(cc, cx, cm)
	__v := (int32)(__ret)
	return __v
}

// NVMinQuotientSerial function as declared in nvector/nvector_serial.h:130
func NVMinQuotientSerial(num NVector, denom NVector) Realtype {
	cnum, _ := num.PassValue()
	cdenom, _ := denom.PassValue()
	__ret := C.N_VMinQuotient_Serial(cnum, cdenom)
	__v := (Realtype)(__ret)
	return __v
}

// NVLinearCombinationSerial function as declared in nvector/nvector_serial.h:133
func NVLinearCombinationSerial(nvec int32, c []Realtype, v []NVector, z NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cc, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&c)).Data)), cgoAllocsUnknown
	cv, _ := unpackArgSNVector(v)
	cz, _ := z.PassValue()
	__ret := C.N_VLinearCombination_Serial(cnvec, cc, cv, cz)
	packSNVector(v, cv)
	__v := (int32)(__ret)
	return __v
}

// NVScaleAddMultiSerial function as declared in nvector/nvector_serial.h:135
func NVScaleAddMultiSerial(nvec int32, a []Realtype, x NVector, y []NVector, z []NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	ca, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	cx, _ := x.PassValue()
	cy, _ := unpackArgSNVector(y)
	cz, _ := unpackArgSNVector(z)
	__ret := C.N_VScaleAddMulti_Serial(cnvec, ca, cx, cy, cz)
	packSNVector(z, cz)
	packSNVector(y, cy)
	__v := (int32)(__ret)
	return __v
}

// NVDotProdMultiSerial function as declared in nvector/nvector_serial.h:137
func NVDotProdMultiSerial(nvec int32, x NVector, y []NVector, dotprods []Realtype) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cx, _ := x.PassValue()
	cy, _ := unpackArgSNVector(y)
	cdotprods, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dotprods)).Data)), cgoAllocsUnknown
	__ret := C.N_VDotProdMulti_Serial(cnvec, cx, cy, cdotprods)
	packSNVector(y, cy)
	__v := (int32)(__ret)
	return __v
}

// NVLinearSumVectorArraySerial function as declared in nvector/nvector_serial.h:141
func NVLinearSumVectorArraySerial(nvec int32, a Realtype, x []NVector, b Realtype, y []NVector, z []NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	ca, _ := (C.realtype)(a), cgoAllocsUnknown
	cx, _ := unpackArgSNVector(x)
	cb, _ := (C.realtype)(b), cgoAllocsUnknown
	cy, _ := unpackArgSNVector(y)
	cz, _ := unpackArgSNVector(z)
	__ret := C.N_VLinearSumVectorArray_Serial(cnvec, ca, cx, cb, cy, cz)
	packSNVector(z, cz)
	packSNVector(y, cy)
	packSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVScaleVectorArraySerial function as declared in nvector/nvector_serial.h:145
func NVScaleVectorArraySerial(nvec int32, c []Realtype, x []NVector, z []NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cc, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&c)).Data)), cgoAllocsUnknown
	cx, _ := unpackArgSNVector(x)
	cz, _ := unpackArgSNVector(z)
	__ret := C.N_VScaleVectorArray_Serial(cnvec, cc, cx, cz)
	packSNVector(z, cz)
	packSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVConstVectorArraySerial function as declared in nvector/nvector_serial.h:147
func NVConstVectorArraySerial(nvecs int32, c Realtype, z []NVector) int32 {
	cnvecs, _ := (C.int)(nvecs), cgoAllocsUnknown
	cc, _ := (C.realtype)(c), cgoAllocsUnknown
	cz, _ := unpackArgSNVector(z)
	__ret := C.N_VConstVectorArray_Serial(cnvecs, cc, cz)
	packSNVector(z, cz)
	__v := (int32)(__ret)
	return __v
}

// NVWrmsNormVectorArraySerial function as declared in nvector/nvector_serial.h:149
func NVWrmsNormVectorArraySerial(nvecs int32, x []NVector, w []NVector, nrm []Realtype) int32 {
	cnvecs, _ := (C.int)(nvecs), cgoAllocsUnknown
	cx, _ := unpackArgSNVector(x)
	cw, _ := unpackArgSNVector(w)
	cnrm, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&nrm)).Data)), cgoAllocsUnknown
	__ret := C.N_VWrmsNormVectorArray_Serial(cnvecs, cx, cw, cnrm)
	packSNVector(w, cw)
	packSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVWrmsNormMaskVectorArraySerial function as declared in nvector/nvector_serial.h:151
func NVWrmsNormMaskVectorArraySerial(nvecs int32, x []NVector, w []NVector, id NVector, nrm []Realtype) int32 {
	cnvecs, _ := (C.int)(nvecs), cgoAllocsUnknown
	cx, _ := unpackArgSNVector(x)
	cw, _ := unpackArgSNVector(w)
	cid, _ := id.PassValue()
	cnrm, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&nrm)).Data)), cgoAllocsUnknown
	__ret := C.N_VWrmsNormMaskVectorArray_Serial(cnvecs, cx, cw, cid, cnrm)
	packSNVector(w, cw)
	packSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVScaleAddMultiVectorArraySerial function as declared in nvector/nvector_serial.h:154
func NVScaleAddMultiVectorArraySerial(nvec int32, nsum int32, a []Realtype, x []NVector, y [][]NVector, z [][]NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cnsum, _ := (C.int)(nsum), cgoAllocsUnknown
	ca, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	cx, _ := unpackArgSNVector(x)
	cy, _ := unpackArgSSNVector(y)
	cz, _ := unpackArgSSNVector(z)
	__ret := C.N_VScaleAddMultiVectorArray_Serial(cnvec, cnsum, ca, cx, cy, cz)
	packSSNVector(z, cz)
	packSSNVector(y, cy)
	packSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVLinearCombinationVectorArraySerial function as declared in nvector/nvector_serial.h:159
func NVLinearCombinationVectorArraySerial(nvec int32, nsum int32, c []Realtype, x [][]NVector, z []NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cnsum, _ := (C.int)(nsum), cgoAllocsUnknown
	cc, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&c)).Data)), cgoAllocsUnknown
	cx, _ := unpackArgSSNVector(x)
	cz, _ := unpackArgSNVector(z)
	__ret := C.N_VLinearCombinationVectorArray_Serial(cnvec, cnsum, cc, cx, cz)
	packSNVector(z, cz)
	packSSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVEnableFusedOpsSerial function as declared in nvector/nvector_serial.h:170
func NVEnableFusedOpsSerial(v NVector, tf int32) int32 {
	cv, _ := v.PassValue()
	ctf, _ := (C.int)(tf), cgoAllocsUnknown
	__ret := C.N_VEnableFusedOps_Serial(cv, ctf)
	__v := (int32)(__ret)
	return __v
}

// NVEnableLinearCombinationSerial function as declared in nvector/nvector_serial.h:172
func NVEnableLinearCombinationSerial(v NVector, tf int32) int32 {
	cv, _ := v.PassValue()
	ctf, _ := (C.int)(tf), cgoAllocsUnknown
	__ret := C.N_VEnableLinearCombination_Serial(cv, ctf)
	__v := (int32)(__ret)
	return __v
}

// NVEnableScaleAddMultiSerial function as declared in nvector/nvector_serial.h:173
func NVEnableScaleAddMultiSerial(v NVector, tf int32) int32 {
	cv, _ := v.PassValue()
	ctf, _ := (C.int)(tf), cgoAllocsUnknown
	__ret := C.N_VEnableScaleAddMulti_Serial(cv, ctf)
	__v := (int32)(__ret)
	return __v
}

// NVEnableDotProdMultiSerial function as declared in nvector/nvector_serial.h:174
func NVEnableDotProdMultiSerial(v NVector, tf int32) int32 {
	cv, _ := v.PassValue()
	ctf, _ := (C.int)(tf), cgoAllocsUnknown
	__ret := C.N_VEnableDotProdMulti_Serial(cv, ctf)
	__v := (int32)(__ret)
	return __v
}

// NVEnableLinearSumVectorArraySerial function as declared in nvector/nvector_serial.h:176
func NVEnableLinearSumVectorArraySerial(v NVector, tf int32) int32 {
	cv, _ := v.PassValue()
	ctf, _ := (C.int)(tf), cgoAllocsUnknown
	__ret := C.N_VEnableLinearSumVectorArray_Serial(cv, ctf)
	__v := (int32)(__ret)
	return __v
}

// NVEnableScaleVectorArraySerial function as declared in nvector/nvector_serial.h:177
func NVEnableScaleVectorArraySerial(v NVector, tf int32) int32 {
	cv, _ := v.PassValue()
	ctf, _ := (C.int)(tf), cgoAllocsUnknown
	__ret := C.N_VEnableScaleVectorArray_Serial(cv, ctf)
	__v := (int32)(__ret)
	return __v
}

// NVEnableConstVectorArraySerial function as declared in nvector/nvector_serial.h:178
func NVEnableConstVectorArraySerial(v NVector, tf int32) int32 {
	cv, _ := v.PassValue()
	ctf, _ := (C.int)(tf), cgoAllocsUnknown
	__ret := C.N_VEnableConstVectorArray_Serial(cv, ctf)
	__v := (int32)(__ret)
	return __v
}

// NVEnableWrmsNormVectorArraySerial function as declared in nvector/nvector_serial.h:179
func NVEnableWrmsNormVectorArraySerial(v NVector, tf int32) int32 {
	cv, _ := v.PassValue()
	ctf, _ := (C.int)(tf), cgoAllocsUnknown
	__ret := C.N_VEnableWrmsNormVectorArray_Serial(cv, ctf)
	__v := (int32)(__ret)
	return __v
}

// NVEnableWrmsNormMaskVectorArraySerial function as declared in nvector/nvector_serial.h:180
func NVEnableWrmsNormMaskVectorArraySerial(v NVector, tf int32) int32 {
	cv, _ := v.PassValue()
	ctf, _ := (C.int)(tf), cgoAllocsUnknown
	__ret := C.N_VEnableWrmsNormMaskVectorArray_Serial(cv, ctf)
	__v := (int32)(__ret)
	return __v
}

// NVEnableScaleAddMultiVectorArraySerial function as declared in nvector/nvector_serial.h:181
func NVEnableScaleAddMultiVectorArraySerial(v NVector, tf int32) int32 {
	cv, _ := v.PassValue()
	ctf, _ := (C.int)(tf), cgoAllocsUnknown
	__ret := C.N_VEnableScaleAddMultiVectorArray_Serial(cv, ctf)
	__v := (int32)(__ret)
	return __v
}

// NVEnableLinearCombinationVectorArraySerial function as declared in nvector/nvector_serial.h:182
func NVEnableLinearCombinationVectorArraySerial(v NVector, tf int32) int32 {
	cv, _ := v.PassValue()
	ctf, _ := (C.int)(tf), cgoAllocsUnknown
	__ret := C.N_VEnableLinearCombinationVectorArray_Serial(cv, ctf)
	__v := (int32)(__ret)
	return __v
}

// NVGetVectorID function as declared in sundials/sundials_nvector.h:150
func NVGetVectorID(w NVector) NVectorID {
	cw, _ := w.PassValue()
	__ret := C.N_VGetVectorID(cw)
	__v := (NVectorID)(__ret)
	return __v
}

// NVClone function as declared in sundials/sundials_nvector.h:151
func NVClone(w NVector) NVector {
	cw, _ := w.PassValue()
	__ret := C.N_VClone(cw)
	__v := *NewNVectorRef(unsafe.Pointer(&__ret))
	return __v
}

// NVCloneEmpty function as declared in sundials/sundials_nvector.h:152
func NVCloneEmpty(w NVector) NVector {
	cw, _ := w.PassValue()
	__ret := C.N_VCloneEmpty(cw)
	__v := *NewNVectorRef(unsafe.Pointer(&__ret))
	return __v
}

// NVDestroy function as declared in sundials/sundials_nvector.h:153
func NVDestroy(v NVector) {
	cv, _ := v.PassValue()
	C.N_VDestroy(cv)
}

// NVSpace function as declared in sundials/sundials_nvector.h:154
func NVSpace(v NVector, lrw []Sunindextype, liw []Sunindextype) {
	cv, _ := v.PassValue()
	clrw, _ := (*C.sunindextype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&lrw)).Data)), cgoAllocsUnknown
	cliw, _ := (*C.sunindextype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&liw)).Data)), cgoAllocsUnknown
	C.N_VSpace(cv, clrw, cliw)
}

// NVGetArrayPointer function as declared in sundials/sundials_nvector.h:155
func NVGetArrayPointer(v NVector) *Realtype {
	cv, _ := v.PassValue()
	__ret := C.N_VGetArrayPointer(cv)
	__v := *(**Realtype)(unsafe.Pointer(&__ret))
	return __v
}

// NVSetArrayPointer function as declared in sundials/sundials_nvector.h:156
func NVSetArrayPointer(vData []Realtype, v NVector) {
	cvData, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&vData)).Data)), cgoAllocsUnknown
	cv, _ := v.PassValue()
	C.N_VSetArrayPointer(cvData, cv)
}

// NVLinearSum function as declared in sundials/sundials_nvector.h:159
func NVLinearSum(a Realtype, x NVector, b Realtype, y NVector, z NVector) {
	ca, _ := (C.realtype)(a), cgoAllocsUnknown
	cx, _ := x.PassValue()
	cb, _ := (C.realtype)(b), cgoAllocsUnknown
	cy, _ := y.PassValue()
	cz, _ := z.PassValue()
	C.N_VLinearSum(ca, cx, cb, cy, cz)
}

// NVConst function as declared in sundials/sundials_nvector.h:161
func NVConst(c Realtype, z NVector) {
	cc, _ := (C.realtype)(c), cgoAllocsUnknown
	cz, _ := z.PassValue()
	C.N_VConst(cc, cz)
}

// NVProd function as declared in sundials/sundials_nvector.h:162
func NVProd(x NVector, y NVector, z NVector) {
	cx, _ := x.PassValue()
	cy, _ := y.PassValue()
	cz, _ := z.PassValue()
	C.N_VProd(cx, cy, cz)
}

// NVDiv function as declared in sundials/sundials_nvector.h:163
func NVDiv(x NVector, y NVector, z NVector) {
	cx, _ := x.PassValue()
	cy, _ := y.PassValue()
	cz, _ := z.PassValue()
	C.N_VDiv(cx, cy, cz)
}

// NVScale function as declared in sundials/sundials_nvector.h:164
func NVScale(c Realtype, x NVector, z NVector) {
	cc, _ := (C.realtype)(c), cgoAllocsUnknown
	cx, _ := x.PassValue()
	cz, _ := z.PassValue()
	C.N_VScale(cc, cx, cz)
}

// NVAbs function as declared in sundials/sundials_nvector.h:165
func NVAbs(x NVector, z NVector) {
	cx, _ := x.PassValue()
	cz, _ := z.PassValue()
	C.N_VAbs(cx, cz)
}

// NVInv function as declared in sundials/sundials_nvector.h:166
func NVInv(x NVector, z NVector) {
	cx, _ := x.PassValue()
	cz, _ := z.PassValue()
	C.N_VInv(cx, cz)
}

// NVAddConst function as declared in sundials/sundials_nvector.h:167
func NVAddConst(x NVector, b Realtype, z NVector) {
	cx, _ := x.PassValue()
	cb, _ := (C.realtype)(b), cgoAllocsUnknown
	cz, _ := z.PassValue()
	C.N_VAddConst(cx, cb, cz)
}

// NVDotProd function as declared in sundials/sundials_nvector.h:168
func NVDotProd(x NVector, y NVector) Realtype {
	cx, _ := x.PassValue()
	cy, _ := y.PassValue()
	__ret := C.N_VDotProd(cx, cy)
	__v := (Realtype)(__ret)
	return __v
}

// NVMaxNorm function as declared in sundials/sundials_nvector.h:169
func NVMaxNorm(x NVector) Realtype {
	cx, _ := x.PassValue()
	__ret := C.N_VMaxNorm(cx)
	__v := (Realtype)(__ret)
	return __v
}

// NVWrmsNorm function as declared in sundials/sundials_nvector.h:170
func NVWrmsNorm(x NVector, w NVector) Realtype {
	cx, _ := x.PassValue()
	cw, _ := w.PassValue()
	__ret := C.N_VWrmsNorm(cx, cw)
	__v := (Realtype)(__ret)
	return __v
}

// NVWrmsNormMask function as declared in sundials/sundials_nvector.h:171
func NVWrmsNormMask(x NVector, w NVector, id NVector) Realtype {
	cx, _ := x.PassValue()
	cw, _ := w.PassValue()
	cid, _ := id.PassValue()
	__ret := C.N_VWrmsNormMask(cx, cw, cid)
	__v := (Realtype)(__ret)
	return __v
}

// NVMin function as declared in sundials/sundials_nvector.h:172
func NVMin(x NVector) Realtype {
	cx, _ := x.PassValue()
	__ret := C.N_VMin(cx)
	__v := (Realtype)(__ret)
	return __v
}

// NVWL2Norm function as declared in sundials/sundials_nvector.h:173
func NVWL2Norm(x NVector, w NVector) Realtype {
	cx, _ := x.PassValue()
	cw, _ := w.PassValue()
	__ret := C.N_VWL2Norm(cx, cw)
	__v := (Realtype)(__ret)
	return __v
}

// NVL1Norm function as declared in sundials/sundials_nvector.h:174
func NVL1Norm(x NVector) Realtype {
	cx, _ := x.PassValue()
	__ret := C.N_VL1Norm(cx)
	__v := (Realtype)(__ret)
	return __v
}

// NVCompare function as declared in sundials/sundials_nvector.h:175
func NVCompare(c Realtype, x NVector, z NVector) {
	cc, _ := (C.realtype)(c), cgoAllocsUnknown
	cx, _ := x.PassValue()
	cz, _ := z.PassValue()
	C.N_VCompare(cc, cx, cz)
}

// NVInvTest function as declared in sundials/sundials_nvector.h:176
func NVInvTest(x NVector, z NVector) int32 {
	cx, _ := x.PassValue()
	cz, _ := z.PassValue()
	__ret := C.N_VInvTest(cx, cz)
	__v := (int32)(__ret)
	return __v
}

// NVConstrMask function as declared in sundials/sundials_nvector.h:177
func NVConstrMask(c NVector, x NVector, m NVector) int32 {
	cc, _ := c.PassValue()
	cx, _ := x.PassValue()
	cm, _ := m.PassValue()
	__ret := C.N_VConstrMask(cc, cx, cm)
	__v := (int32)(__ret)
	return __v
}

// NVMinQuotient function as declared in sundials/sundials_nvector.h:178
func NVMinQuotient(num NVector, denom NVector) Realtype {
	cnum, _ := num.PassValue()
	cdenom, _ := denom.PassValue()
	__ret := C.N_VMinQuotient(cnum, cdenom)
	__v := (Realtype)(__ret)
	return __v
}

// NVLinearCombination function as declared in sundials/sundials_nvector.h:181
func NVLinearCombination(nvec int32, c []Realtype, x []NVector, z NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cc, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&c)).Data)), cgoAllocsUnknown
	cx, _ := unpackArgSNVector(x)
	cz, _ := z.PassValue()
	__ret := C.N_VLinearCombination(cnvec, cc, cx, cz)
	packSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVScaleAddMulti function as declared in sundials/sundials_nvector.h:184
func NVScaleAddMulti(nvec int32, a []Realtype, x NVector, y []NVector, z []NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	ca, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	cx, _ := x.PassValue()
	cy, _ := unpackArgSNVector(y)
	cz, _ := unpackArgSNVector(z)
	__ret := C.N_VScaleAddMulti(cnvec, ca, cx, cy, cz)
	packSNVector(z, cz)
	packSNVector(y, cy)
	__v := (int32)(__ret)
	return __v
}

// NVDotProdMulti function as declared in sundials/sundials_nvector.h:187
func NVDotProdMulti(nvec int32, x NVector, y []NVector, dotprods []Realtype) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cx, _ := x.PassValue()
	cy, _ := unpackArgSNVector(y)
	cdotprods, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&dotprods)).Data)), cgoAllocsUnknown
	__ret := C.N_VDotProdMulti(cnvec, cx, cy, cdotprods)
	packSNVector(y, cy)
	__v := (int32)(__ret)
	return __v
}

// NVLinearSumVectorArray function as declared in sundials/sundials_nvector.h:191
func NVLinearSumVectorArray(nvec int32, a Realtype, x []NVector, b Realtype, y []NVector, z []NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	ca, _ := (C.realtype)(a), cgoAllocsUnknown
	cx, _ := unpackArgSNVector(x)
	cb, _ := (C.realtype)(b), cgoAllocsUnknown
	cy, _ := unpackArgSNVector(y)
	cz, _ := unpackArgSNVector(z)
	__ret := C.N_VLinearSumVectorArray(cnvec, ca, cx, cb, cy, cz)
	packSNVector(z, cz)
	packSNVector(y, cy)
	packSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVScaleVectorArray function as declared in sundials/sundials_nvector.h:196
func NVScaleVectorArray(nvec int32, c []Realtype, x []NVector, z []NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cc, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&c)).Data)), cgoAllocsUnknown
	cx, _ := unpackArgSNVector(x)
	cz, _ := unpackArgSNVector(z)
	__ret := C.N_VScaleVectorArray(cnvec, cc, cx, cz)
	packSNVector(z, cz)
	packSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVConstVectorArray function as declared in sundials/sundials_nvector.h:199
func NVConstVectorArray(nvec int32, c Realtype, z []NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cc, _ := (C.realtype)(c), cgoAllocsUnknown
	cz, _ := unpackArgSNVector(z)
	__ret := C.N_VConstVectorArray(cnvec, cc, cz)
	packSNVector(z, cz)
	__v := (int32)(__ret)
	return __v
}

// NVWrmsNormVectorArray function as declared in sundials/sundials_nvector.h:201
func NVWrmsNormVectorArray(nvec int32, x []NVector, w []NVector, nrm []Realtype) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cx, _ := unpackArgSNVector(x)
	cw, _ := unpackArgSNVector(w)
	cnrm, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&nrm)).Data)), cgoAllocsUnknown
	__ret := C.N_VWrmsNormVectorArray(cnvec, cx, cw, cnrm)
	packSNVector(w, cw)
	packSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVWrmsNormMaskVectorArray function as declared in sundials/sundials_nvector.h:204
func NVWrmsNormMaskVectorArray(nvec int32, x []NVector, w []NVector, id NVector, nrm []Realtype) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cx, _ := unpackArgSNVector(x)
	cw, _ := unpackArgSNVector(w)
	cid, _ := id.PassValue()
	cnrm, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&nrm)).Data)), cgoAllocsUnknown
	__ret := C.N_VWrmsNormMaskVectorArray(cnvec, cx, cw, cid, cnrm)
	packSNVector(w, cw)
	packSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVScaleAddMultiVectorArray function as declared in sundials/sundials_nvector.h:208
func NVScaleAddMultiVectorArray(nvec int32, nsum int32, a []Realtype, x []NVector, y [][]NVector, z [][]NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cnsum, _ := (C.int)(nsum), cgoAllocsUnknown
	ca, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&a)).Data)), cgoAllocsUnknown
	cx, _ := unpackArgSNVector(x)
	cy, _ := unpackArgSSNVector(y)
	cz, _ := unpackArgSSNVector(z)
	__ret := C.N_VScaleAddMultiVectorArray(cnvec, cnsum, ca, cx, cy, cz)
	packSSNVector(z, cz)
	packSSNVector(y, cy)
	packSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVLinearCombinationVectorArray function as declared in sundials/sundials_nvector.h:212
func NVLinearCombinationVectorArray(nvec int32, nsum int32, c []Realtype, x [][]NVector, z []NVector) int32 {
	cnvec, _ := (C.int)(nvec), cgoAllocsUnknown
	cnsum, _ := (C.int)(nsum), cgoAllocsUnknown
	cc, _ := (*C.realtype)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&c)).Data)), cgoAllocsUnknown
	cx, _ := unpackArgSSNVector(x)
	cz, _ := unpackArgSNVector(z)
	__ret := C.N_VLinearCombinationVectorArray(cnvec, cnsum, cc, cx, cz)
	packSNVector(z, cz)
	packSSNVector(x, cx)
	__v := (int32)(__ret)
	return __v
}

// NVCloneEmptyVectorArray function as declared in sundials/sundials_nvector.h:221
func NVCloneEmptyVectorArray(count int32, w NVector) *NVector {
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	cw, _ := w.PassValue()
	__ret := C.N_VCloneEmptyVectorArray(ccount, cw)
	__v := NewNVectorRef(unsafe.Pointer(__ret))
	return __v
}

// NVCloneVectorArray function as declared in sundials/sundials_nvector.h:222
func NVCloneVectorArray(count int32, w NVector) *NVector {
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	cw, _ := w.PassValue()
	__ret := C.N_VCloneVectorArray(ccount, cw)
	__v := NewNVectorRef(unsafe.Pointer(__ret))
	return __v
}

// NVDestroyVectorArray function as declared in sundials/sundials_nvector.h:223
func NVDestroyVectorArray(vs []NVector, count int32) {
	cvs, _ := unpackArgSNVector(vs)
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	C.N_VDestroyVectorArray(cvs, ccount)
	packSNVector(vs, cvs)
}

// SUNRpowerI function as declared in sundials/sundials_math.h:146
func SUNRpowerI(base Realtype, exponent int32) Realtype {
	cbase, _ := (C.realtype)(base), cgoAllocsUnknown
	cexponent, _ := (C.int)(exponent), cgoAllocsUnknown
	__ret := C.SUNRpowerI(cbase, cexponent)
	__v := (Realtype)(__ret)
	return __v
}

// SUNRpowerR function as declared in sundials/sundials_math.h:161
func SUNRpowerR(base Realtype, exponent Realtype) Realtype {
	cbase, _ := (C.realtype)(base), cgoAllocsUnknown
	cexponent, _ := (C.realtype)(exponent), cgoAllocsUnknown
	__ret := C.SUNRpowerR(cbase, cexponent)
	__v := (Realtype)(__ret)
	return __v
}
